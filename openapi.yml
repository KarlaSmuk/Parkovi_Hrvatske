openapi: 3.1.1
info:
  title: Parkovi hrvatske
  description: API za parkove hrvatske
  contact:
    name: Karla Å muk
  license:
    name: CC0-1.0 license
    url: https://creativecommons.org/publicdomain/zero/1.0/
  version: 1.0.0
paths:
  /api/parks:
    get:
      summary: Fetch all parks
      description: Fetch all parks
      operationId: listAllParks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
    post:
      summary: Add a new park
      description: Add a new park
      operationId: addNewPark
      requestBody:
        description: Create a new park
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParkRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'          
        '405':
          description: Invalid input
  /api/parks/{parkId}:
    get:
      summary: Find park by id
      description: Returns a park
      operationId: getParkByID
      parameters:
        - name: parkId
          in: path
          description: ID of park to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'          
        '400':
          description: Invalid status value
    put:
      summary: Update an existing park
      description: Update an existing park by Id
      operationId: updatePark
      parameters:
        - name: parkId
          in: path
          description: ID of park to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing park
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
    delete:
      summary: Delete a park
      description: Delete a park
      operationId: deletePark
      parameters:
        - name: parkId
          in: path
          description: ID of park to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
  api/parks/{parkId}/animals:
    get:
      summary: Find animals of park
      description: Returns animals of park
      operationId: getAnimalsByPark
      parameters:
        - name: parkId
          in: path
          description: ID of park
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'          
        '400':
          description: Invalid tag value
  api/parks/{parkId}/counties:
    get:
      summary: Find counties of park
      description: Returns counties of park
      operationId: getCountiesByPark
      parameters:
        - name: parkId
          in: path
          description: ID of park
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
  api/parks/{parkId}/peak:
    get:
      summary: Find peak of park
      description: Returns peak of park
      operationId: getPeakByParkID
      parameters:
        - name: parkId
          in: path
          description: ID of park
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
components:
  schemas:
    Response:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 10
        message:
          type: integer
          format: int64
          example: 198772
        response:
          type: integer
          format: int32
          example: 7
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'