openapi: 3.1.0
info:
  title: Parkovi hrvatske
  description: API za parkove hrvatske
  contact:
    name: Karla Å muk
  license:
    name: CC0-1.0 license
    url: https://creativecommons.org/publicdomain/zero/1.0/
  version: 1.0.0
paths:
  /api/parks:
    get:
      tags:
        - Park REST Controller
      summary: Fetch all parks
      description: Fetch all parks
      operationId: listAllParks
      responses:
        '200':
          description: Fetched all parks
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ParksResponse'
    post:
      tags:
          - Park REST Controller
      summary: Add a new park
      description: Add a new park
      operationId: addNewPark
      requestBody:
        description: Create a new park
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParkRequest'
        required: true
      responses:
        '200':
          description: New park created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkResponseDto'
        '400':
          description: Peak already assigned to another park
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError' 
        '409':
          description: Park already exists 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
  /api/parks/{parkId}:
    get:
      tags:
        - Park REST Controller
      summary: Find park by id
      description: Returns a park
      operationId: getParkByID
      parameters:
        - name: parkId
          in: path
          description: ID of park to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Fetched park with parkId
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ParkResponse'          
        '404':
          description: Park not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'  
    put:
      tags:
        - Park REST Controller
      summary: Update an existing park
      description: Update an existing park by Id
      operationId: updatePark
      parameters:
        - name: parkId
          in: path
          description: ID of park to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing park
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParkRequest'
        required: true
      responses:
        '200':
          description: Park updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkResponse'
        '400':
          description: Peak already assigned to another park
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'  
        '404':
          description: Park not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'  
    delete:
      tags:
        - Park REST Controller
      summary: Delete a park
      description: Delete a park
      operationId: deletePark
      parameters:
        - name: parkId
          in: path
          description: ID of park to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Park deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkDeletedResponse' 
        '404':
          description: Park doesnt exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'  
  /api/parks/{parkId}/animals:
    get:
      tags:
        - Park REST Controller
      summary: Find animals of park
      description: Returns animals of park
      operationId: getAnimalsByPark
      parameters:
        - name: parkId
          in: path
          description: ID of park
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Fetched animals for park with parkId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalsResponse'       
        '404':
          description: Park not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'  
  /api/parks/{parkId}/counties:
    get:
      tags:
        - Park REST Controller
      summary: Find counties of park
      description: Returns counties of park
      operationId: getCountiesByPark
      parameters:
        - name: parkId
          in: path
          description: ID of park
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Fetched counties for park with parkId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountiesResponse'           
        '404':
          description: Park not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'  
  /api/parks/{parkId}/peak:
    get:
      tags:
        - Park REST Controller
      summary: Find peak of park
      description: Returns peak of park
      operationId: getPeakByParkID
      parameters:
        - name: parkId
          in: path
          description: ID of park
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Fetched peak for park with parkId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeakResponse'
        '404':
          description: Peak not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'  
  /api:
    get:
      tags:
        - API Controller
      summary: API
      description: Returns openapi specification
      operationId: getAPI
      responses:
        '200':
          description: Successful response
components:
  schemas:
    ParksResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        message:
          type: string
          example: Fetched all parks
        response:
          type: array
          format: list
          items:
            $ref: '#/components/schemas/ParkResponseDto'
    ParkResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        message:
          type: string
          example: Fetched park with parkId
        response:
          $ref: '#/components/schemas/ParkResponseDto'
    ParkDeletedResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        message:
          type: string
          example: Park deleted
        response:
          example: null
    PeakResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        message:
          type: string
          example: Fetched peak for park with parkId
        response:
          $ref: '#/components/schemas/HighestPeakResponseDto'
    AnimalsResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        message:
          type: string
          example: Fetched animals for park with parkId
        response:
          type: array
          format: list
          items:
            $ref: '#/components/schemas/AnimalResponseDto'
    CountiesResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        message:
          type: string
          example: Fetched counties for park with parkId
        response:
          type: array
          format: list
          items:
            $ref: '#/components/schemas/CountyResponseDto'        
    ResponseError:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        response:
          type: string
    CreateParkRequest:
      type: object
      properties:
        parkName:
          type: string
        typeOfParkName:
          type: string
        yearOfFoundation:
          type: integer
        area:
          type: number
          format: double
        peak:
          type: object
          items:
            $ref: '#/components/schemas/HighestPeakDto'
        counties:
          type: array
          format: list
          items:
            $ref: '#/components/schemas/CountyDto'
        atraction:
          type: string
        event:
          type: string
        animals:
          type: array
          format: list
          items:
            $ref: '#/components/schemas/AnimalDto'
    ParkResponseDto:
      type: object
      properties:
        parkId:
          type: integer
        parkName:
          type: string
        typeOfParkName:
          type: string
        yearOfFoundation:
          type: integer
        area:
          type: number
          format: double
        peak:
          type: object
          items:
            $ref: '#/components/schemas/HighestPeakResponseDto'
        counties:
          type: array
          format: list
          items:
            $ref: '#/components/schemas/CountyResponseDto'
        atraction:
          type: string
        event:
          type: string
        animals:
          type: array
          format: list
          items:
            $ref: '#/components/schemas/AnimalResponseDto'
    HighestPeakResponseDto:
      type: object
      properties:
        peakID:
          type: integer
        peakName:
          type: string
        peakHeight:
          type: integer
    AnimalResponseDto:
      type: object
      properties:
        animalID:
          type: integer
        animalName:
          type: string
        speciesOfAnimal:
          type: string
    CountyResponseDto:
      type: object
      properties:
        countyID:
          type: integer
        countyName:
          type: string
    HighestPeakDto:
      type: object
      properties:
        peakName:
          type: string
        peakHeight:
          type: integer
    AnimalDto:
      type: object
      properties:
        animalName:
          type: string
        speciesOfAnimal:
          type: string
    CountyDto:
      type: object
      properties:
        countyName:
          type: string
  requestBodies:
    Park:
      description: Park object that needs to be created or updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateParkRequest'